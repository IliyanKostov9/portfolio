version: 2.1

orbs:
  ggshield: gitguardian/ggshield@1.1.4

executors:
  docker-python:
    docker:
      - image: cimg/python:3.11
        # working_directory: /tmp
    docker-base:
      - image: cimg/base:2024.09

jobs:
  build:
    executor: docker-python
    resource_class: medium
    steps:
      - checkout

      - run:
          name: Create Python venv
          command: |
            python --version
            python -m venv .venv

      - run:
          name: Install deps
          command: |
            . .venv/bin/activate
            echo "Now installing pyre deps..."
            pip install --upgrade setuptools
            pip install wheel
            pip install -r ./requirements.txt

      - save_cache:
          paths:
            - .venv
          key: venv-{{ .Environment.CIRCLE_SHA1  }}

      - persist_to_workspace:
          root: .
          paths:
            - src
            - stubs
            - .pyre_configuration
            - tests

  test:
    executor: docker-python
    resource_class: medium+
    steps:
      - run: echo "Test performed"

  security-analysis:
    executor: docker-python
    resource_class: medium
    steps:
      - ggshield/scan:
          name: ggshield-scan
          base_revision: <<pipeline.git.base_revision>>
          revision: <<pipeline.git.revision>>
      - restore_cache:
          key: pyre-cache

      - run:
          name: Pysa analysis
          command: |
            . .venv/bin/activate
            pyre --noninteractive analyze --no-verify --use-cache --output-format json

      - save_cache:
          paths:
            - .pyre
          key: pyre-cache

  static-analysis:
    executor: docker-python
    resource_class: large # Neeed to pyre analyze. Else it throws broken pipe error
    steps:
      - restore_cache:
          key: venv-{{ .Environment.CIRCLE_SHA1  }}

      - attach_workspace:
          at: .

      - run:
          name: Pyre analysis
          command: |
            . .venv/bin/activate
            pyre --output=json | python3 -m json.tool

workflows:
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - security-analysis:
          requires:
            - test
      - static-analysis:
          requires:
            - security-analysis
